{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
      "useJSXTextNode": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint", "jest", "react", "import", "prettier", "unicorn"],
  "extends": [
    "airbnb-typescript",
    "airbnb/hooks",
    "plugin:@typescript-eslint/recommended",
    "plugin:jest/recommended",
    "plugin:unicorn/recommended",
    "plugin:import/typescript",
    "plugin:prettier/recommended",
    "plugin:react/recommended",
    "prettier"
  ],
  "env": {
    "browser": true,
    "es6": true,
    "jest": true
  },
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "rules": {
    "prettier/prettier": "error",
    "import/no-unresolved": "error",
    // Typescript will handle undefined variables
    "no-undef": "off",
    "no-unused-vars": "off",
    // Too restrictive, writing ugly code to defend against a very unlikely scenario: https://eslint.org/docs/rules/no-prototype-builtins
    "no-prototype-builtins": "off",
    "no-console": "error",
    // same as @typescript-eslint/naming-convention
    "no-underscore-dangle": "off",
    // https://basarat.gitbooks.io/typescript/docs/tips/defaultIsBad.html
    "import/prefer-default-export": "off",
    "import/no-default-export": "off",
    "import/export": "off",
    "import/no-cycle": "error",
    "import/order": [
      "error",
      {
        "newlines-between": "always",
        "groups": [
          ["builtin", "external"],
          ["internal", "sibling", "parent", "index"]
        ]
      }
    ],
    // No jsx extension: https://github.com/facebook/create-react-app/issues/87#issuecomment-234627904
    "react/jsx-filename-extension": "off",
    "react/jsx-props-no-spreading": "off",
    // Types are handled by typescript
    "react/prop-types": "off",
    "react/no-array-index-key": "warn",
    // Too restrictive: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md
    "react/destructuring-assignment": [
      "warn",
      "always",
      {
        "ignoreClassFields": true
      }
    ],
    // Using arrow functions or binding in JSX  props is a bad practice that hurts performance
    "react/jsx-no-bind": [
      "error",
      {
        "allowArrowFunctions": false
      }
    ],
    "react/static-property-placement": [
      "warn",
      "property assignment",
      {
        "defaultProps": "static public field",
        "childContextTypes": "static public field",
        "contextTypes": "static public field",
        "contextType": "static public field",
        "displayName": "static public field"
      }
    ],
    // Makes no sense - typescript is very good at predicting a return type
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": true,
        "variables": true,
        "typedefs": true
      }
    ],
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    // Common abbreviations are known and readable
    "unicorn/prevent-abbreviations": "off",
    "unicorn/no-null": "off",
    "unicorn/empty-brace-spaces": "error",
    "unicorn/filename-case": "off",
    "unicorn/no-array-callback-reference": "off",
    "jest/prefer-expect-assertions": "off",
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": ["const", "let", "var"],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": ["const", "let", "var"],
        "next": ["const", "let", "var"]
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["class", "return", "export"]
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ]
  }
}
